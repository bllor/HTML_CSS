자바스크립트란 웹페이지 상에서 동적으로 요소를 변경하고, 사용자 인터페이스를 지원하기 위해 고안된 스크립트 언어
자바스크립트엔진이란 자바스크립트 코드를 이해하고, 실행하는 프로그램
자바스크립트의 네이밍룰: 카멜케이스를 주로 사용한다.
boolean변수는 is,has,are과 같은 동사를 써서 나타내면 좋다
vanilla는 자바스크립트만을 사용하는 것을 의미한다.


자바스크립트에서 null과 undefined는 다른 값이다.
null은 값이 아예없는 것이고, undefined는 값을 할당받지 못한 것이다.
null은 object이며, undefined의 타입은 undefined이다.

boolean(0)만 false이고, 나머지 숫자들은 true이다(음수도)
자바스크립트의 자료구조에는 symbol이 있는데, symbol값은 호출될 때 유니크한 값을 리턴한다.
a  = symbol(1) 
b  = symbol(1) 
(a===b) -> false이다.

switch문에서 case내에 break를 해주지 않으면 다음케이스와 default까지 출력한다.


함수
function 함수명(함수인자){
    함수실행코드
    *함수인자 : 함수로 넘어오는 데이터
}

화살표 함수
()=> expression으로 시작하는 화살표 함수는 익명함수이다.
그래서 변수에 화살표함수를 대입하여 사용한다.
let plus = (a)=> a+1처럼 간단히 사용하는 경우에는 {}안에 실행문을 작성하지 않아도 되고, 자동으로 a+1이 리턴된다


자바스크립트 객체는 프로퍼티(변수)와 메서드(함수)로 이루어져 있다.
자바스크립트의 객체 생성방법
1.객체 리터럴
a ={} <-- 이렇게 하면 객체가 된다.
*자바스크립트는 클래스 기반 객체 지향언어가 아니고, 프로토 타입 기반 객체 지향 언어이다
클래스기반객체지향언어
설계도를 클래스로 만들어 놓고 클래스에서 각각 상속해서 사용하는 언어
프로토타입기반 객체지향언어
변수와 메서드를 지정해놓고 그것을 묶는 것이 프로퍼키기반 객체지향언어
getter와 setter를 사용할 수 있는데, 객체 사용 시 함수 인자를 넣지 않아도 되고,
setter사용시 setter(함수인자)로 만들지만 setter = variance로 =로 값을 대입한다.
자바스크립트는 상속도 가능하다.
상속받은 클래스에서는 super()로 부모 클래스를 가져올 수 있다.
다형성도 지원하는데, 다른 언어와 달리 메서드의 이름이 같으면, 메서드의 인자가 다르다 할지라도 자식 메서드를 사용한다.

객체 안의 프로퍼티를 참조해야하는 경우, this.프로퍼티 를 통해서 참조할 수 있다.
객체 안에서는 화살표함수의 사용이 가능하지만, this가 지원되지 않는다.

클래스는 외부에서도 생성할 수 있는데, 외부에서 생성된 프로퍼티인지 내부에서 생성된 프로퍼티인지 구분하는 함수가 hasownProperty()이며,
내부에서 생성될 경우 true가 반환된다.



배열은 빈배열을 만든 뒤 추가할 수 있다
const myArray = new Array() <--빈 배열 생성
myArray[0] = 1
etc

for var of data
배열 data에 있는 값을 변수 var에 대입하여 출력한다
data =[1,2,3]
for(item of data){
console.log(item)
}
1,2,3이 출력된다


object.entries(배열) --> 배열의 프로퍼티를 순차적으로 출력한다.
object.keys(배열) --> 배열의 키를 순차적으로 출력한다.
object.values(배열) --> 배열의 값을 순차적으로 출력한다.

for item in 배열
배열의 키 값이 출력하는 방법으로,
만약 값을 출력하고 싶으면 배열[item]을 할 경우 값이 출력된다.


---------
배열 관련 기능
push : 배열의 맨 마지막에 요소를 추가한다. 


pop : 배열의 맨 마지막 요소를 삭제한다.


shift : 배열의 첫 번째 아이템을 삭제하고 뒤에 있는 아이템을 앞으로 당긴다.
a=[1,2,3,4]
a.shift();
console.log(a) --> [2,3,4]만 출력 된다.


join : 아이템 사이에 특정 문자열을 넣어서 모든 아이템들을 하나의 문자열로 만들어준다.
a=[1,1,2,2]
strA = a.join('+')
console.log(strA)-->1+1+2+2

slice : 배열의 일부분을 반환
slice(a,b) --> a번 인덱스부터 b-1번 인덱스까지 추출


forEach: for문을 대체하여 간단히 배열의 각 아이템을 가져올 수 있는 함수

let a = [1,23,5]

a.forEach(item=>{
    console.log(item)-->1,23,5가 차례로 출력된다.
})

map : 배열의 각 아이템에 정의한 함수를 적용해서, 새로운 배열을 리턴하는 함수

a=[1,2,3,4]
b = a.map(item=>{return item*2}) <-- a배열의 각각의 요소가 item으로 출력이 되고, 각 아이템에 *2를 하여 b에 저장이 된다.


findIndex : 배열의 아이템이 객체일 경우, 해당 객체에서 저장한 데이터 위치를 찾을 수 있는 방법을 제공함

a=[
    {name:'동일',age:30},
    {name:'희지',age:29},
    {name:'비아',age:13},
    {name:'보리',age:2}
]

console.log(a.indexOf('동일')) --> -1을 리턴한다
console.log(a.findIndex(item => item.name==='희지')) --> 1을 리턴한다.


find: findIndex와 유사하지만, 지정한 데이터의 위치를 리턴하는 것이 아니라, 지정한 데이터가 있는 객체를 리턴한다.
console.log(a.find(item=>item.name==='비아')) {name: '비아', age: 13} 리턴된다


filter : 배열에서 특정 조건에 맞는 아이템만 추출할 때 사용하는 기능


-----------
함수에 기본 인자(파라미터)값 설정
function printName(name='dongil'){
    console.log(name)
}
--> name에 값이 있을 경우, name값이 나오고, name에 값이 없을 경우 dongil이 출력된다.


구조 분해 할당(비구조화 할당)기법
이름만 보면 이해하기 어려운 구조 분해 할당은 배열이나 객체의 속성을 해체해서, 값을 개별 변수에 대입할 수 있게 하는 문법

let data ={
    name:'동일',
    age:30
}

let {name,age} = data;
console.log(name,age)--> '동일',30이 출력된다.

프로퍼티명과 다른 변수명을 사용하고자 할 경우, 대입할 프로퍼티명:다른 변수명의 형태로 써주어야 한다.
let{name:myname,myage:age}=data;

꼭 객체의 모든 프로퍼티를 가져올 필요는 없고, 객체의 프로퍼티 중 필요한 것만 가져올 수 잇다.
let {name}= data;
let {name,hobby='swim'}= data; -->data에 없는 것도 디폴트로 추가할 수 있으며
let {name,job:myJob='developer'}=data --> 만약 data에 job이 있을 경우, myJob으로 데이터에 있는 값이 출력되고, 그렇지 않은 경우 developer가 출력된다.


배열 분해 할당
let data = [1,2,3];
let [i1,i2,i3]=data; --> 1,2,3이 할당된다.
2만가져오고 싶은 경우, Let[,i2,]=data --> I2출력 시 2가 나온다.

let[i1,...i2] =data ...i2에는 변수에 대입되지 않은 나머지 변수들이 들어간다.



--------
* vscode에서 js를 실행시키는 방법
node를 설치한다음, 실행시킬 파일이 있는 곳에서 node 파일명을 한다.
터미널의 폴더가 a 이고, 실행파일인 test는 a폴더 아래 b폴더에 있으면
node b/test.js 를 하면 파일이 실행된다.




