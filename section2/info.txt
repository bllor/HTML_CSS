css: 웹페이지를 꾸밀 때 사용

css selector: html문서의 특정부분을 선택하기 위한 문법(id,class등의 태그)
rule set: html문서 특정부분을 정의한 구문

reset css
웹브라우저마다 각기 다른 default스타일이 지정되어 있으므로, 이를 초기화 하여
다양한 웹브라우저에서도 동일한 스타일로 표시되도록 설정
cdn(content delivery network):다른 서버에서 필요한 파일을 가져올 수 있음

css 크기 단위
px: 픽셀 단위(해상도에 따라 상대적인 크기를 가짐)
%: 백분율 단위의 상대 단위, 지정사이즈를 기반으로 상대저인 비율의 크기
em: 배수단위, 지정 사이즈를 기반으로 배수로 계산된 크기(부모태그를 기준)
rem: 최상위 요소 사이즈를 기준으로 함

ex)
<div font =8px>
<div font=2em> --> 여기서는 8*2=16 폰트사이즈가 16px가 된다.

viewport단위
vw:viewport 너비의 1/100
vh:viewport 높이의 1/100


색상을 표현하는 단위
1)색상을 이름으로 표기
2)16진수로 표현
3)rgb로 표현
4)rgba - 투명도까지 표현(0~1)1일수록 투명하지 않다.

*어도브컬러 - 색상 조합을 보여준다

*rgba와 opacity의 차이
opacity는 투명도 값이 상속된다.


----------------------------
css selector : html의 특정부분을 선택하기 위한 문법
css selector로 html 문서 특정부분을 정의한 구문을 rule set이라고 부르며, 이와 같은 rule set집합을 style sheet라고 한다.

*{}: html문서 전체를 선택

<reset.css 요즘은 이것보다 normalize.css를 많이 쓴다.>
*{
    margin: 0,
    padding: 0,
    border: none,
}
태그 셀렉터: 태그에 css를 적용하는 것 
id 셀렉터: id에 css를 적용하는 것 #id명
클래스 셀렉터: 클래스에 css를 적용하는 것 .클래스명
attribute 셀렉터: attribute에 css를 적용하는 것 .클래스명
ex)
[data-value]{text: blue}
[data-value='prop']{text:green}
<p data-value>문단<p>
<p data-value:prop>prop</p>
문단은 파란색, prop은 초록색으로 나타난다.

data-value~=속성
속성으로 시작하는 모든 곳에서 css를 적용

a[attr^=value] {color: red}
--> a태그 요소 중 attr 속성 값이 value로 시작하는 모든 태그 요소에 적용

a[attr$=value] {color: red}
--> a태그 요소 중 attr 속성 값이 value로 끝나는 모든 태그 요소에 적용

a[attr*=value] {color: red}
--> a태그 요소 중 attr 속성 값이 value을 포함하는 모든 태그 요소에 적용

class ='클래스명1 클래스명2 클래스명3'
이 경우는 클래스명1,2,3의 모든 css가 적용이 된다.

복합 셀렉터
후손 셀렉터 : 스페이스로 표시
자식 셀렉터 : >로 표시 
인접 형제 셀렉터 : +로 표시 (바로 뒤에 위치한 태크)
일반 형제 셀렉터 : ~로 표시 (같은 태그 내 동일한 레벨에 위치한 태그)

가상 클래스 셀렉터 : 요소에 특정 이벤트 발생시 선택하는 문법
가상셀렉터는 :을 사용한다.

a:hover --> 특정 요소에 마우스가 올라간 상태

UI요소 상태 셀렉터: 특정 UI 요소 상태에 따른 셀렉터
ex)
checkbox checked --> 체크박스에서 선택이 되면 css를 변경

nth-child는 타입이 다른 것도 포함시키므로 원하는 결과를 내지 못할 수 있는데,
그럴 경우, nth-type을 사용하면 원하는 태그에 css를 적용시킬 수 있다.

정합성 체크 셀렉터
input --> required : 입력창에 무조건 데이터를 넣어야함
invalid --> 데이터가 없는 상태
valid 데이터가 있는 상태
input --> pattern : 정규표현식의 패턴을 넣음(패턴을 만드는 것은 자바스크립트에서 많이 사용된다.)

가상요소 셀렉터
first-letter: 요소의 첫 글자 선택
first-line: 요소의 첫 라인(줄) 선택
after : 요소의 뒤에 위치하는 공간선택, content 프로퍼티와 함께 사용
before : 요소의 앞에 위치하는 공간 선택, content 프로퍼티와 함께 사용
selection : 요소에서 드래그한 부분을 선택

h3::before {
    content: 'hi',
    color: blue
}
h3태그 앞에 hi라는 컨탠츠가 파란색으로 나타난다.

h3::after{
    content: 'bye',
    color: 'yellow'
}
h3태그 뒤에 bye 라는 컨텐츠가 노란색으로 나타난다.

box-sizing: content-box --> 보더와 패딩을 제외한 컨텐츠박스의 크기와 높이를 지정할 때 사용
box-sizing: border-box -->  보더와 패딩, 컨텐츠박스를 포함한 크기와 높이
max-width : 요소 너비가 브라우저 너비보다 클 경우, 자동으로 요소의 너비가 줄어들고 스크롤이 생긴다.


margin,padding: 위, 오른쪽, 아래쪽, 왼쪽(시계방향)
padding: 위 양쪽 아래쪽 (3개만 입력하면 왼쪽, 오른쪽은 같은 값을 주게 해준다)
padding: 위아래 좌우 

maring: 10px auto <-- 브라우저의 가운데로 정렬을 할 때 사용한다.

------------------------------------------------------------
background-image: url또는 주소를 사용한다.
background-repeat: 요소의 배경영역을 차지할 때까지 이미지를 반복, 이미지가 넘치면 짜름
repeat를 하지 않기 위해서 no-repeat, 요소의 이미지가 잘리지 않을 정도로 이미지를 반복하는 Round가 있다.
repeat-x : 가로로만 반복
repeat-y : 세로로만 반복
이미지를 여러개 쓰면 첫번째 이미지 뒤에 두번째 이미지가 나오므로, 첫번째 이미지의 영역만큼 두번째 이미지는 짤린다.

background img 프로퍼티
auto: 이미지 크기 유지
cover: 요소 사이즈를 다 채울 수 있게 이미지를 확대 또는 축소, 가로 세로 비율 유지
contain: 요소 사이즈를 벗어나지 않는 최대 크기로 이미지를 확대 또는 축소, 가로 세로 비율 유지(사진 짤림 없고, 최대한 요소를 맞추기 위해 커짐)
initial: 기본값으로 설정

background-attachment: fixed or scroll
--> fixed를 사용하면 스크롤을 해도 사진이 없어지지 않고 랜더링한 위치에 계속 나와있다.


block
-화면 전체를 차지
-새로운 줄을 차지
-내부에 inline이 들어올 수 있음
-높이, 너비 설정가능
inline
-내부에 block이 들어오지 못함
-높이 너비 설정 불가

display 프로퍼티는 태그의 속성인 block, inline 등을 변경할 때 사용한다.
inline-block : 인라인 요소와 같이 한 라인에 표현되면서도 width, height등의 프로퍼티 설정가능
Inline이나 inline-block의 특성을 가진 요소 뒤에 공백(엔터 또는 스페이스)이 있을 경우, 4px(스페이스 한 번)만큼 공간이 띄워진다

visibility프로퍼티 -- 요소를 보이게 할지 안보이게 할지
visibility:hidden 해당 요소를 보이지 않게 하지만 공간은 남겨둠
visibility:visible 요소를 보이게 함

웹폰트 : 웨브라우저에서 다운 받아 사용자에게 보여지는 폰트
Link에 추가한 다음 사용하면 된다.
font-varient: 소문자를 소문자 크기의 대문자로 바꾸는 설정
font-varient:small-caps: 소문자를 소문자 크기의 대문자로 변경

letter-spacing: 글자사이의 간격 조정, word-spacing: 단어사이의 간격 조정

white-space: no-wrap --> 글자가 줄바꿈이 되지 않는다.
white-space: pre 단락안에 줄바꿈, 띄워쓰기 등이 있으면 그대로 보여준다.

text-overflow:
조건 : width가 있어야 하고, white-space:no-wrap, overflow프로퍼티가 visible 이외의 값이어야 한다.
Text-overflow: clip --> 텍스트를 잘라낸다
Text-overflow: ellipsis --> 텍스트가 잘렸다는 것을 말줄임표로 표시

position : html 요소 위치를 결정하는 방식
1.정적위치
위치를 변경할 수 없다.
2.상대위치
원래 있어야할 위치를 기준으로 위치를 조절할 수 있다.
relative로 비어 있는 공간은 다른 태그가 차지하지 않는다.
3.absolute
가까운 위치에 있는 position속성이 relatived인 부모요소를 기준으로 좌표에 따라 위치 한다.
4.고정위치(fixed)
Position 속성이 relative인 부모 요소가 아니라, 뷰포트를 기준으로 특정 위치에 배치

overflow: 자식요소가 부모요소를 벗어날 때 사용
overflow: scroll --> 내부에 스크롤이 생김(내용이 넘치지 않아도 스크롤이 생김)
overflow: auto --> 내용이 넘칠 경우 스크롤이 생김

css transition : css 프로퍼티 변경 시, 값 변화가 일정 시간에 걸쳐 일어나도록 해서 일종의 애니메이션 효과를 주는 기능 

transition-property : opacity;
transition-duration: 3s;
opacity가 3초에 걸쳐서 변화가 생긴다.
transition-timing-function: 변하는 방식을 나타낼 때 사용한다.
transition-delay : value value만큼 지연했다가 실행한다.


ainimation : 중간에 변경되는 스타일을 세밀하게 지정할 수 있다.
애니메이션은 애니메이션을 나타내는 Css스타일과 중간 상태를 나타내는 키프레임(@keyframes)로 이루어져있다
js보다 렌더링 성능이 좋다.

{
    animation-name: ball; // 애니메이션의 이름 (하나 이상 적용할 수 있다.)
    animation-duration: 5s; // 애니메이션의 실행시간 
    animation-iteration-count: infinite // 애니메이션의 반복횟수
} 

@keyframe ball{ // 이름이 ball인 애니메이션의 효과를 정의
 0~100% 0은 처음 100은 마지막
 0%{
    top:0
 },
50%{
    top:50px
}
100%{
    top:100px
}
}
실행시간이 지남에 따라 0,50%,100%의 효과가 나타난다.



css transform : 요소의 회전, 크기조절, 기울이기, 이동 효과를 부여하는 함수
애니메이션 등의 키프레임 기반 설정은 제공하지 않으므로 애니메이션 효과 필요시 애니메이션이나 transition을 함께 사용한다.

translate: (x,y) x축으로 x, y축으로 y만큼 이동
scale: 크기를 조절
skew: 기울이기
rotate:회전할 때 사용
transform-origin: 요소의 기준점을 변경(기본 값은 요소의 중심)

css float 프로퍼티는 수평 정렬을 위해 사용되었으며 지금은 flex, grid를 많이 사용한다.
flexbox는 호환성 이슈가 많이 해결되었다.
float의 단점은 float를 할 경우 공간을 인지하지 못하는 문제가 있다
이를 해결하기 위해서는
.clearfix::after{
    content: '';
    clear: both;
    display: block;
}
와 같이 css 프로퍼티를 만든 후 추가해준다.(비공식적인 방법)
float를 설정할 경우 block특성으로 변하는데, content의 크기만큼 늘어난다.
float가 적용된 요소에 Content가 있을 경우, content의 너비와 높이는 다음 요소의 content에 영향을 준다.

css 상속

상속가능 css : text-align, line-height, color, font, visibility, opacity
상속불가 Css : width, height, margin, padding, border, display, box-sizing, background, vertical-align, position, z-index, overflow, float etc...

강제상속 : 상속이 불가능한 것을 상속할 때 사용
key: inherit 를 할경우 부모의 key 속성을 가져올 수 있다.


css의 우선순위
인라인으로 넣어둔것을 먼저 사용
그리고 대상을 명확하게 지정할수록 css적용 우선순위가 높아지고, 문서에서 뒤에 나오는 Css일수록 우선순위가 높다.
만약 !important로 할 경우 바로 우선 순위가 높아지지만 인라인보다는 낮다.

----------------
적응형 웹 : 사용자가 모바일인지 ,pc인지에 따라 다른 페이지를 보여줌
반응형 웹 : 동일한 웹페이지를 보여주되, 웹페이지를 보여주는 화면 사이즈에 따라 다르게 보여줌

px로 지정할 경우 해상도에 따라 크기가 달라지는 한계가 있는데, 이를 극복하기 위해 생긴 것이 viewport
viewport는 화면상의 표시 영역을 의미한다.
viewport를 설정하는 방법은 <meta name='viewport' content='device-width initial-scale=1.0'>와 같이 사용하며
device-width는 화면의 넓이를 뜻하고, initial-scale은 초기 화면의 배율을 뜻한다.


웹페이지에서 레이아웃이란 각 페이지 구성 요소를 페이지 내에 효과적으로 배열하는 일을 의미한다.

미디어쿼리는 css의 조건식으로 사용이 되며 @media로 사용할 수 있다.
@media media-type and 조건
media-type의 종류
all :   전체
print : 프린트 화면
screen : 브라우저 화면
speech : 음성

조건에는 min-width, max-width, orientation(방향) 정도가 많이 쓰이며, 여러 조건을 사용할 수 있다.

flex를 사용하려고 하면 부모 태그가 있어야 하며, 이 부모태그를 flex container라고 한다.
부모요소에 display:flex를 할 경우, 자식은 flex item이 된다.

div박스 내 수평정렬text-align:center
수직 정렬 -> Line-height와 div박스의 높이값만큼 동일하게 써주면 된다.

flex-wrap: 아이템을 한줄에 보여줄지 안보여줄지
flex-wrap: nowrap이 디폴트 값이며 한 줄로 보여준다.
no-wrap은 넘칠거 같으면 다음줄로 넘기는 것


align-item: 교차축을 기반으로 각 행마다 설정을 정할 수 있음
align-content: 교차축을 기반으로 자식태그들까지 설정을 할 수 있음
align-self: 하나만 설정할 때 할 수 있음(우선적으로 사용할 때 쓰임)

flex-grow: 태그의 크기를 늘릴 때 사용함
flex-grow:1 flex-grow:2,flex-grow:1 하나의 div내에 존재한다면
flex-grow:2 가 화면의 50%를, 나머지가 각각 25%를 차지한다.
전체화면 == 전체 flex-grow의 수
개별화면 == flex-grow/전체 flex-grow수

flex-shrink flex-grow의 반대개념으로, 태그의 크기를 줄일 때 사용한다.
